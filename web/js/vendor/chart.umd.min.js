/*! Lightweight Chart Fallback (bar/line) â€” API-compatible subset for PHASE 2.
   Replace this file later with official Chart.js UMD build for full features. */
(function(g,f){typeof module==="object"&&module.exports?module.exports=f(): (g.Chart=f());})(typeof window!=="undefined"?window:this,function(){
  console.warn("[Chart.js fallback] Using lightweight renderer (bar/line only). Replace with official Chart.js UMD for full features.");
  function getCtx(c){ if(!c) return null; return c.getContext?c.getContext("2d"):c; }
  function clear(ctx){ if(!ctx||!ctx.canvas) return; ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height); }
  function max1(arr){ var m=1; for(var i=0;i<arr.length;i++){ var v=+arr[i]||0; if(v>m) m=v; } return m; }
  function drawAxes(ctx,W,H){ ctx.beginPath(); ctx.moveTo(30,10); ctx.lineTo(30,H-30); ctx.lineTo(W-10,H-30); ctx.strokeStyle="#d1d5db"; ctx.lineWidth=1; ctx.stroke(); }
  function drawLabels(ctx,labels,W,H){ ctx.fillStyle="#9ca3af"; ctx.font="12px sans-serif"; if(!labels||!labels.length) return;
    var step=(W-60)/labels.length; for(var i=0;i<labels.length;i++){ var x=40+i*step; ctx.fillText(String(labels[i]).slice(0,12), x, H-12); } }
  function Chart(canvas,config){
    this.ctx=getCtx(canvas); this.config=config||{}; this._draw();
  }
  Chart.prototype.destroy=function(){ clear(this.ctx); };
  Chart.prototype._draw=function(){
    var cfg=this.config||{}, type=cfg.type||"bar";
    var ds=(cfg.data&&cfg.data.datasets&&cfg.data.datasets[0])||{data:[]};
    var data=Array.isArray(ds.data)?ds.data:[]; var labels=(cfg.data&&cfg.data.labels)||[];
    var ctx=this.ctx; if(!ctx) return; var W=ctx.canvas.width, H=ctx.canvas.height;
    clear(ctx); ctx.save(); drawAxes(ctx,W,H); drawLabels(ctx,labels,W,H);
    if(type==="bar"){
      var max=max1(data), bw=(W-80)/Math.max(1,labels.length);
      for(var i=0;i<data.length;i++){ var v=+data[i]||0, h=(H-60)*(v/max);
        ctx.fillStyle="#3b82f6"; ctx.fillRect(40+i*bw, H-30-h, bw*0.6, h); }
    } else if(type==="line"){
      var max2=max1(data), step=(W-60)/Math.max(1,(labels.length||data.length)-1);
      ctx.strokeStyle="#10b981"; ctx.lineWidth=2; ctx.beginPath();
      for(var j=0;j<data.length;j++){ var x=30+j*step, y=H-30-(H-60)*((+data[j]||0)/max2);
        if(j===0) ctx.moveTo(x,y); else ctx.lineTo(x,y); }
      ctx.stroke();
      for(var k=0;k<data.length;k++){ var x2=30+k*step, y2=H-30-(H-60)*((+data[k]||0)/max2);
        ctx.beginPath(); ctx.arc(x2,y2,3,0,6.283); ctx.fillStyle="#10b981"; ctx.fill(); }
    }
    ctx.restore();
  };
  return Chart;
});
